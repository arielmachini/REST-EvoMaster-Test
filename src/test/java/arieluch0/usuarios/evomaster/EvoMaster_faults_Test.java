package arieluch0.usuarios.evomaster;

import io.restassured.RestAssured;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import io.restassured.response.ValidatableResponse;
import org.evomaster.client.java.controller.SutHandler;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import org.junit.jupiter.api.*;

import java.util.Arrays;
import java.util.List;

import static io.restassured.RestAssured.given;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.numberMatches;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import static org.hamcrest.Matchers.containsString;
import static org.junit.jupiter.api.Assertions.assertNotNull;


/**
 * This file was automatically generated by EvoMaster on 2024-05-10T15:46:23.626969895-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 26
 * <br>
 * Used time: 3h 5m 23s
 * <br>
 * Needed budget for current results: 43%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {


    private static final SutHandler controller = new arieluch0.usuarios.evomaster.ControladorEvoMaster();
    private static String baseUrlOfSut;
    /**
     * [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
     * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
     */
    private static final boolean ems = false;
    /**
     * sco - supported code oracle - checking that the response status code is among those supported according to the schema
     */
    private static final boolean sco = false;


    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false));
    }


    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }


    @BeforeEach
    public void initTest() {
        controller.resetDatabase(List.of("usuario"));
        controller.resetStateOfSUT();
    }


    /**
     * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options.
     * ErrorText_0
     * LastLine_0
     */
    @Test
    @Timeout(60)
    public void test_0_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("usuario", 9L)
                .d("nombre", "\"CJXgA99B\"")
                .d("apellido", "\"wBQdUd\"")
                .and().insertInto("usuario", 10L)
                .d("nombre", "\"uF5N\"")
                .d("apellido", "\"aHT4_G7oGKvwUA6L\"")
                .and().insertInto("usuario", 11L)
                .d("nombre", "\"uiBwHQI\"")
                .d("apellido", "\"\"")
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"nombre\": \"GnJix4agXYU\" " +
                        " } ")
                .post(baseUrlOfSut + "/usuarios")
                .then()
                .statusCode(500) // arieluch0/usuarios/controlador/ControladorUsuarios_27_crearUsuario
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/usuarios"));

        expectationHandler.expect(ems)
                .that(sco, List.of(200).contains(res_0.extract().statusCode()));
    }


    /**
     * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options.
     * ErrorText_0
     * LastLine_0
     */
    @Test
    @Timeout(60)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " +
                        " \"id\": 835, " +
                        " \"apellido\": \"_EM_7_XYZ_\" " +
                        " } ")
                .post(baseUrlOfSut + "/usuarios")
                .then()
                .statusCode(500) // arieluch0/usuarios/controlador/ControladorUsuarios_27_crearUsuario
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/usuarios"));

        expectationHandler.expect(ems)
                .that(sco, List.of(200).contains(res_0.extract().statusCode()));
    }


}
