package arieluch0.usuarios.evomaster;

import io.restassured.RestAssured;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import io.restassured.response.ValidatableResponse;
import org.evomaster.client.java.controller.SutHandler;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import org.junit.jupiter.api.*;

import java.util.Arrays;
import java.util.List;

import static io.restassured.RestAssured.given;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.assertNotNull;


/**
 * This file was automatically generated by EvoMaster on 2024-05-10T15:46:23.712539829-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 6 tests
 * <br>
 * Covered targets: 46
 * <br>
 * Used time: 3h 5m 24s
 * <br>
 * Needed budget for current results: 43%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {


    private static final SutHandler controller = new arieluch0.usuarios.evomaster.ControladorEvoMaster();
    private static String baseUrlOfSut;
    /**
     * [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
     * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
     */
    private static final boolean ems = false;
    /**
     * sco - supported code oracle - checking that the response status code is among those supported according to the schema
     */
    private static final boolean sco = false;


    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false));
    }


    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }


    @BeforeEach
    public void initTest() {
        controller.resetDatabase(List.of("usuario"));
        controller.resetStateOfSUT();
    }


    @Test
    @Timeout(60)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();

        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v3/api-docs")
                .then()
                .statusCode(200);

        expectationHandler.expect(ems)
                /*
                 Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
                 This is somewhat unexpected, so the code below is likely to lead to a failed expectation
                */
                .that(sco, List.of().contains(res_0.extract().statusCode()));
    }


    @Test
    @Timeout(60)
    public void test_1() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/usuarios/107")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());

    }


    @Test
    @Timeout(60)
    public void test_2() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/usuarios/123")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("ERROR: No existe ningún usuario con el ID 123."));

    }


    @Test
    @Timeout(60)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("usuario", 9L)
                .d("nombre", "\"CJXgA99B\"")
                .d("apellido", "\"wBQdUd\"")
                .and().insertInto("usuario", 10L)
                .d("nombre", "\"uF5N\"")
                .d("apellido", "\"aHT4_G7oGKvwUA6L\"")
                .and().insertInto("usuario", 11L)
                .d("nombre", "\"uiBwHQI\"")
                .d("apellido", "\"\"")
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);

        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/usuarios")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(12))
                .body("[0].'nombre'", containsString("CJXgA99B"))
                .body("[0].'apellido'", containsString("wBQdUd"))
                .body("[1].'nombre'", containsString("uF5N"))
                .body("[1].'apellido'", containsString("aHT4_G7oGKvwUA6L"))
                .body("[2].'nombre'", containsString("_EM_181_XYZ_"))
                .body("[2].'apellido'", containsString("_EM_182_XYZ_"))
        ; // Skipping assertions on the remaining 9 elements. This limit of 3 elements can be increased in the configurations

    }


    @Test
    @Timeout(60)
    public void test_4() throws Exception {

        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " +
                        " \"apellido\": \"_EM_10_XYZ_\" " +
                        " } ")
                .put(baseUrlOfSut + "/usuarios/168")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("ERROR: No existe ningún usuario con el ID 168."));

    }


    @Test
    @Timeout(60)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("usuario", 57L)
                .d("nombre", "\"_EM_181_XYZ_\"")
                .d("apellido", "\"_EM_182_XYZ_\"")
                .and().insertInto("usuario", 58L)
                .d("nombre", "\"_EM_183_XYZ_\"")
                .d("apellido", "\"CT\"")
                .and().insertInto("usuario", 59L)
                .d("nombre", "\"mQ7Lh\"")
                .d("apellido", "\"ur\"")
                .and().insertInto("usuario", 35L)
                .d("nombre", "\"7\"")
                .d("apellido", "\"_EM_135_XYZ_\"")
                .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);

        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_136_XYZ_")
                .delete(baseUrlOfSut + "/usuarios/3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("OK: El usuario \"uiBwHQI \" fue borrado exitosamente."));

    }


}
